@model Nomad.Models.Client

@{
    int count = 0;
}

<div class="row spacer">
    <div class="col-md-3">
        <h4>Client Properties</h4>

        <ul class="list-group">
            <li class="list-group-item"><strong>ID</strong>: @Model.ID</li>
            <li class="list-group-item"><strong>Name</strong>: @Model.Name</li>
            <li class="list-group-item"><strong>Datacenter</strong>: @Model.Datacenter</li>
            <li class="list-group-item"><strong>Address</strong>: @Model.HTTPAddr</li>
            <li class="list-group-item"><strong>TLS</strong>: @Model.TLSEnabled</li>
            <li class="list-group-item"><strong>Status</strong>: @Model.Status</li>
            <li class="list-group-item"><strong>Drain</strong>: @Model.Drain</li>
            <li class="list-group-item"><strong>Meta</strong>: @Model.Meta</li>
        </ul>
    </div>

    <div class="col-md-3">
        <h4>Resources</h4>

        <ul class="list-group">
            <li class="list-group-item"><strong>CPU (MHz)</strong>: @Model.Resources.CPU</li>
            <li class="list-group-item"><strong>Memory (MB)</strong>: @Model.Resources.MemoryMB</li>
            <li class="list-group-item"><strong>Disk (MB)</strong>: @Model.Resources.DiskMB</li>
            <li class="list-group-item"><strong>IOPS</strong>: @Model.Resources.IOPS</li>
            @foreach (var network in Model.Resources.Networks)
            {
                <li class="list-group-item"><strong>Device</strong>: @network.Device</li>
                <li class="list-group-item"><strong>Network (Mbps)</strong>: @network.MBits</li>
                <li class="list-group-item"><strong>IP</strong>: @network.IP</li>
            }
        </ul>
    </div>

    <div class="col-md-4">
        <h4>Attributes</h4>

        <ul class="list-group">
            <li class="list-group-item"><strong>OS Version</strong>: @Model.Attributes.Where(a => a.Key == "os.name").Select(a => a.Value).FirstOrDefault() @Model.Attributes.Where(a => a.Key == "os.version").Select(a => a.Value).FirstOrDefault()</li>
            <li class="list-group-item"><strong>Docker Version</strong>: @Model.Attributes.Where(a => a.Key == "driver.docker.version").Select(a => a.Value).FirstOrDefault()</li>
            <li class="list-group-item"><strong>Nomad Version</strong>: @Model.Attributes.Where(a => a.Key == "nomad.version").Select(a => a.Value).FirstOrDefault()</li>
            <li class="list-group-item"><strong>Consul Version</strong>: @Model.Attributes.Where(a => a.Key == "consul.version").Select(a => a.Value).FirstOrDefault()</li>
            <li class="list-group-item"><button type="button" class="btn btn-link" data-toggle="modal" data-target="#attributeModal">More...</button></li>
        </ul>

        <div id="attributeModal" class="modal fade" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-body">
                        <ul class="list-group">
                            @foreach (var attribute in Model.Attributes.OrderBy(a => a.Key))
                            {
                                <li class="list-group-item"><strong>@attribute.Key:</strong>&nbsp;@attribute.Value</li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="charts"></div>

<script type="text/babel">
    var App = React.createClass({
        getInitialState: function() {
            return {
                client: null
            }
        },
            
        componentDidMount: function() {
            const makeRequest = () => axios.get("/api/client/stats?client=@Model.Resources.Networks.FirstOrDefault().IP").then(({ data }) => this.setState({ client: data }));
            
            this.serverRequest = makeRequest();
            
            this.poll = setInterval(() => {
                this.serverRequest = makeRequest();
            }, 1000) // Poll every 1 seconds
        },

        componentWillUnmount: function() {
            this.serverRequest.abort();
            clearInterval(this.poll)
        },

        render: function() {
            const { client } = this.state;

            if (client === null) {
                return null
            }

            return (
                <div className="row spacer">
                    @foreach (var cpu in Model.Stats.CPU)
                    {
                        @if (string.IsNullOrEmpty(cpu.CPU))
                        {
                            cpu.CPU = "CPU" + count;
                        }

                        <div className="col-md-3">
                            <h4>@cpu.CPU.ToString().ToUpper() Utilisation</h4>
                            <reactChartjs2.Doughnut
                                data={{
                                    labels: ["Idle %", "Active %"],
                                    datasets: [{
                                        data: [client.cpu[@count].idle, client.cpu[@count].total],
                                        backgroundColor: ['#1fb58f', '#eab126'],
                                        hoverBackgroundColor: ['#1fb58f', '#eab126'],
                                        borderColor: ['#1e1e1e', '#1e1e1e']
                                    }]
                                }}
                                options={{
                                    cutoutPercentage: 75,
                                    legend: {
                                        labels: {
                                            fontColor: "#fff"
                                        }
                                    }
                                }}
                                height={200}
                            />
                        </div>

                        count++;
                    }

                    <div className="col-md-3">
                        <h4>Memory Utilisation</h4>
                        <reactChartjs2.Doughnut
                            data={{
                                labels: ["Available MB", "Consumed MB"],
                                datasets: [{
                                    data: [client.memory.available, client.memory.used],
                                    backgroundColor: ['#1fb58f', '#eab126'],
                                    hoverBackgroundColor: ['#1fb58f', '#eab126'],
                                    borderColor: ['#1e1e1e', '#1e1e1e']
                                }]
                            }}
                            options={{
                                cutoutPercentage: 75,
                                legend: {
                                    labels: {
                                        fontColor: "#fff"
                                    }
                                }
                            }}
                            height={200}
                        />
                    </div>
                </div>
            )
        }
    });

    ReactDOM.render(<App />, document.getElementById("charts"));
</script>

<div class="row spacer">
    <div class="col-md-12">
        <h4>Allocations</h4>

        <table class="table table-hover">
            <thead>
                <tr class="row">
                    <th class="col">ID</th>
                    <th class="col">Name</th>
                    <th class="col">Task Group</th>
                    <th class="col">Desired Status</th>
                    <th class="col">Client Status</th>
                    <th class="col">Create Time</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var allocation in Model.Allocations)
                {
                    <tr class="row">
                        <td class="col"><a href="/allocation?id=@allocation.ID">@allocation.ID</a></td>
                        <td class="col">@allocation.Name</td>
                        <td class="col">@allocation.TaskGroup</td>
                        <td class="col">@allocation.DesiredStatus</td>
                        <td class="col">@allocation.ClientStatus</td>
                        <td class="col">@allocation.CreateDateTime</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <h4>Raw JSON <a class="material-icons" href="#json" data-toggle="collapse">keyboard_arrow_down</a></h4>

        <div id="json" class="collapse">
            <pre><code>@ViewData["Json"]</code></pre>
        </div>
    </div>
</div>

<div id="dashboard"></div>
<script type="text/jsx">
    var App = React.createClass({
        getInitialState: function() {
            return {
                dashboard: null
            }
        },
        
        componentDidMount: function() {
            const makeRequest = () => axios.get("/api/dashboard").then(({ data }) => this.setState({ dashboard: data }));
            this.serverRequest = makeRequest();
            this.poll = setInterval(() => {
                this.serverRequest = makeRequest();
            }, 5000) // Poll every 5 seconds
        },
        
        componentWillUnmount: function() {
            this.serverRequest.abort();
            clearInterval(this.poll)
        },
        
        render: function() {
            const {dashboard} = this.state;
            
            if(dashboard === null) {
                return null
            }
            
            return (
                <div>
                    <div className="row spacer">
                        <div className="col-md-3">
                            <h4>Job States</h4>
                            <reactChartjs2.Doughnut
                                data={{
                                    labels: ["Pending", "Running", "Dead"],
                                    datasets: [{
                                        data: [dashboard.pendingJobs, dashboard.runningJobs, dashboard.deadJobs],
                                        backgroundColor: ['#eab126', '#1fb58f', '#f24c4e'],
                                        hoverBackgroundColor: ['#eab126', '#1fb58f', '#f24c4e'],
                                        borderColor: ['#1e1e1e', '#1e1e1e', '#1e1e1e']
                                    }]
                                }}
                                options={{
                                    cutoutPercentage: 75,
                                    legend: {
                                        labels: {
                                            fontColor: "#dfdfdf"
                                        }
                                    }
                                }}
                                height={200}
                            />
                        </div>

                        <div className="col-md-3">
                            <h4>Allocation States</h4>
                            <reactChartjs2.Doughnut
                                data={{
                                    labels: ["Pending", "Running", "Dead"],
                                    datasets: [{
                                        data: [dashboard.pendingAllocations, dashboard.runningAllocations, dashboard.deadAllocations],
                                        backgroundColor: ['#eab126', '#1fb58f', '#f24c4e'],
                                        hoverBackgroundColor: ['#eab126', '#1fb58f', '#f24c4e'],
                                        borderColor: ['#1e1e1e', '#1e1e1e', '#1e1e1e']
                                    }]
                                }}
                                options={{
                                    cutoutPercentage: 75,
                                    legend: {
                                        labels: {
                                            fontColor: "#dfdfdf"
                                        }
                                    }
                                }}
                                height={200}
                            />
                        </div>

                        <div className="col-md-3">
                            <h4>Client States</h4>
                            <reactChartjs2.Doughnut
                                data={{
                                    labels: ["Up", "Down"],
                                    datasets: [{
                                        data: [dashboard.upClients, dashboard.downClients],
                                        backgroundColor: ['#1fb58f', '#f24c4e'],
                                        hoverBackgroundColor: ['#1fb58f', '#f24c4e'],
                                        borderColor: ['#1e1e1e', '#1e1e1e']
                                    }]
                                }}
                                options={{
                                    cutoutPercentage: 75,
                                    legend: {
                                        labels: {
                                            fontColor: "#dfdfdf"
                                        }
                                    }
                                }}
                                height={200}
                            />
                        </div>

                        <div className="col-md-3">
                            <h4>Server States</h4>
                            <reactChartjs2.Doughnut
                                data={{
                                    labels: ["Up", "Down"],
                                    datasets: [{
                                        data: [dashboard.upMembers, dashboard.downMembers],
                                        backgroundColor: ['#1fb58f', '#f24c4e'],
                                        hoverBackgroundColor: ['#1fb58f', '#f24c4e'],
                                        borderColor: ['#1e1e1e', '#1e1e1e']
                                    }]
                                }}
                                options={{
                                    cutoutPercentage: 75,
                                    legend: {
                                        labels: {
                                            fontColor: "#dfdfdf"
                                        }
                                    }
                                }}
                                height={200}
                            />
                        </div>
                    </div>

                    <div className="row">
                        <div className="col-md-12">
                            <h4>Allocation Events</h4>
                            <table className="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Type</th>
                                        <th>Message</th>
                                        <th>Time</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {dashboard.events.map((event) => {
                                        var d = new Date(event.dateTime);
                                        
                                        function addZero(i) {
                                            if (i < 10) {
                                                i = "0" + i;
                                            }
                                            
                                            return i;
                                        }
                                        
                                        return (
                                            <tr>
                                                <td>{event.allocationName}</td>
                                                <td>{event.type}</td>
                                                <td>
                                                    {event.downloadError}
                                                    {event.driverError}
                                                    {event.driverMessage}
                                                    {event.killError}
                                                    {event.killReason}
                                                    {event.message}
                                                    {event.restartReason}
                                                    {event.setupError}
                                                    {event.taskSignalReason}
                                                    {event.validationError}
                                                    {event.vaultError}
                                                </td>
                                                <td>{d.getDate()}/{addZero((d.getMonth() + 1))}/{d.getFullYear()} {addZero(d.getHours())}:{addZero(d.getMinutes())}:{addZero(d.getSeconds())}</td>
                                            </tr>
                                        )
                                    })}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            )
        }
    });

    ReactDOM.render(<App />, document.getElementById("dashboard"));
</script>

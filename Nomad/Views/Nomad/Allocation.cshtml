@model Nomad.Models.Allocation

<div class="row spacer">
    <div class="col-md-6">
        <div class="row spacer">
            <div class="col-md-6">
                <h4>Allocation Properties</h4>

                <ul class="list-group">
                    <li class="list-group-item"><strong>ID</strong>: @Model.ID</li>
                    <li class="list-group-item"><strong>Name</strong>: @Model.Name</li>
                    <li class="list-group-item"><strong>Job ID</strong>:&nbsp;<a href="/job?id=@Model.JobID">@Model.JobID</a></li>
                    <li class="list-group-item"><strong>Evaluation ID</strong>:&nbsp;<a href="/evaluation?id=@Model.EvalID">@Model.EvalID</a></li>
                    <li class="list-group-item"><strong>Node ID</strong>:&nbsp;<a href="/client?id=@Model.NodeID">@Model.NodeID</a></li>
                    <li class="list-group-item"><strong>Desired Status</strong>: @Model.DesiredStatus</li>
                    <li class="list-group-item"><strong>Client Status</strong>: @Model.ClientStatus</li>
                    <li class="list-group-item"><strong>Create Time</strong>: @Model.CreateDateTime</li>
                </ul>
            </div>

            <div class="col-md-6">
                <h4>Resources</h4>

                <ul class="list-group">
                    <li class="list-group-item"><strong>CPU (MHz)</strong>: @Model.Resources.CPU</li>
                    <li class="list-group-item"><strong>Memory (MB)</strong>: @Model.Resources.MemoryMB</li>
                    <li class="list-group-item"><strong>Disk (MB)</strong>: @Model.Resources.DiskMB</li>
                    @foreach (var network in Model.Resources.Networks)
                    {
                        <li class="list-group-item"><strong>Network (Mbps)</strong>: @network.MBits</li>
                        <li class="list-group-item"><strong>Device</strong>: @network.Device</li>
                        <li class="list-group-item"><strong>IP</strong>: @network.IP</li>
                        @foreach (var port in network.DynamicPorts)
                        {
                            <li class="list-group-item"><strong>Port</strong>: @port.Value</li>
                        }
                    }
                </ul>
            </div>
        </div>

        <div id="root"></div>
        <script type="text/jsx">
            var App = React.createClass({
                getInitialState: function() {
                    return {
                        client: null
                    }
                },
                
                componentDidMount: function() {
                    const makeRequest = () => axios.get("http://@(Model.Resources.Networks.FirstOrDefault().IP):4646/v1/client/allocation/@Model.ID/stats").then(({ data }) => this.setState({ client: data }));
                    this.serverRequest = makeRequest();
                    this.poll = setInterval(() => {
                        this.serverRequest = makeRequest();
                    }, 5000) // Poll every 5 seconds
                },
                
                componentWillUnmount: function() {
                    this.serverRequest.abort();
                    clearInterval(this.poll)
                },
                
                render: function() {
                    const { client } = this.state;
                    
                    if(client === null) {
                        return null
                    }
                    
                    var idleCpu = (100 - client.ResourceUsage.CpuStats.Percent);
                    var activeCpu = client.ResourceUsage.CpuStats.Percent;
                    var availableMem = (@Model.Resources.MemoryMB - (client.ResourceUsage.MemoryStats.MaxUsage / 1024) / 1024);
                    var consumedMem = ((client.ResourceUsage.MemoryStats.MaxUsage / 1024) / 1024);
                    
                    return (
                        <div className="row spacer">
                            <div className="col-md-6">
                                <h4>CPU Utilisation</h4>
                                <reactChartjs2.Doughnut
                                    data={{
                                        labels: ["Idle %", "Active %" ],
                                        datasets: [{
                                            data: [idleCpu, activeCpu],
                                            backgroundColor: ['#1fb58f', '#eab126' ],
                                            hoverBackgroundColor: ['#1fb58f', '#eab126' ],
                                            borderColor: ['#1e1e1e', '#1e1e1e' ]
                                        }]
                                    }}
                                    options={{
                                        cutoutPercentage: 75,
                                        legend: {
                                            labels: {
                                                fontColor: "#dfdfdf"
                                            }
                                        }
                                    }}
                                    height={200}
                                />
                            </div>

                            <div className="col-md-6">
                                <h4>Memory Utilisation</h4>
                                    <reactChartjs2.Doughnut
                                    data={{
                                        labels: ["Available MB", "Consumed MB"],
                                        datasets: [{
                                            data: [availableMem, consumedMem],
                                            backgroundColor: ['#1fb58f', '#eab126'],
                                            hoverBackgroundColor: ['#1fb58f', '#eab126'],
                                            borderColor: ['#1e1e1e', '#1e1e1e']
                                        }]
}}
                                    options={{
                                        cutoutPercentage: 75,
                                        legend: {
                                            labels: {
                                                fontColor: "#dfdfdf"
                                            }
                                        }
                                    }}
                                    height={200}
                                />
                            </div>
                        </div>
                    )
                }
            });

            ReactDOM.render(<App />, document.getElementById("root"));
        </script>
    </div>

    <div class="col-md-6">
        <h4>Logs</h4>

        <nav class="nav logs-nav">
            @foreach (var log in Model.Logs.OrderBy(l => l.Name))
            {
                <a class="nav-link log" href="#">@log.Name</a>
            }
        </nav>

        <div id="log">
            <pre><code></code></pre>
        </div>

        <script>
            $('.log').on("click", function () {
                $('.log').removeClass('active');
                $(this).addClass('active');

                $('#log pre code').html('<img src="images/loading.gif" alt="Loading..." />');

                $.get("/allocation/log?client=@Model.Resources.Networks.FirstOrDefault().IP&id=@Model.ID&log=" + $(this).text(), function (content) {
                    if (content) {
                        $('#log pre code').html(content);
                    }
                    else {
                        $('#log pre code').html("¯\\_(ツ)_/¯");
                    }
                });
            });
        </script>
    </div>
</div>

<div class="row spacer">
    <div class="col-md-12">
        <h4>Task Events</h4>

        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Message</th>
                    <th>Time</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var key in Model.TaskStates.Keys)
                {
                    @foreach (var @event in Model.TaskStates[key].Events.OrderByDescending(t => t.Time))
                    {
                        <tr>
                            <td>@Model.Name</td>
                            <td>@(@event.Type)</td>
                            <td>
                                @(@event.DownloadError)
                                @(@event.DriverError)
                                @(@event.DriverMessage)
                                @(@event.KillError)
                                @(@event.KillReason)
                                @(@event.Message)
                                @(@event.RestartReason)
                                @(@event.SetupError)
                                @(@event.TaskSignalReason)
                                @(@event.ValidationError)
                                @(@event.VaultError)
                            </td>
                            <td>@(@event.DateTime)</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <h4>Raw JSON <a href="#json" data-toggle="collapse">&darr;</a></h4>

        <div id="json" class="collapse">
            <pre><code>@ViewData["Json"]</code></pre>
        </div>
    </div>
</div>
